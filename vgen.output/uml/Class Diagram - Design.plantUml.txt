' Generated with VGen 2.0.0

@startuml

class Position {
    +int getLine()
    +int getColumn()
    +boolean lessThan(Position other)
    +boolean greaterThan(Position other)
}

interface AST {
    +updatePositions(Object... children)
    +updatePositions(Position start, Position end)
    +Object accept(Visitor visitor, Object param)
}

AST *-[#404040,thickness=1]- Position : start >
AST *-[#404040,thickness=1]- Position : end >


interface Expression {
}
AST <|-[#808080]- Expression

interface Definition {
}
AST <|-[#808080]- Definition

interface Statement {
}
AST <|-[#808080]- Statement

interface Type {
}
AST <|-[#808080]- Type

interface AST {
}

class Program {
}
AST <|-[#808080]- Program
Program o-[#404040,thickness=2]- "✱" Definition : definitions >

class VarDefinition {
	+String name
}
Definition <|-[#808080]- VarDefinition
VarDefinition o-[#404040,thickness=2]-  Type : type >

class StructDefinition {
	+String name
}
Definition <|-[#808080]- StructDefinition
StructDefinition o-[#404040,thickness=2]- "✱" Field : fields >

class FunctionDefinition {
	+String name
}
Definition <|-[#808080]- FunctionDefinition
FunctionDefinition o-[#404040,thickness=2]- "✱" VarDefinition : varDefinitions >
FunctionDefinition o-[#404040,thickness=2]- "0..1" Type : type >
FunctionDefinition o-[#404040,thickness=2]- "✱" Definition : definitions >
FunctionDefinition o-[#404040,thickness=2]- "✱" Statement : statements >

class Field {
	+String name
}
AST <|-[#808080]- Field
Field o-[#404040,thickness=2]-  Type : type >

class Print {
}
Statement <|-[#808080]- Print
Print o-[#404040,thickness=2]-  Expression : expression >

class Read {
}
Statement <|-[#808080]- Read
Read o-[#404040,thickness=2]-  Expression : expression >

class FunctionCallStatement {
	+String name
}
Statement <|-[#808080]- FunctionCallStatement
FunctionCallStatement o-[#404040,thickness=2]- "✱" Expression : expressions >
FunctionCallStatement -[#ff6600,thickness=3]-  FunctionDefinition #text:ff6600 : functionDefinition >

class Assignment {
}
Statement <|-[#808080]- Assignment
Assignment o-[#404040,thickness=2]-  Expression : left >
Assignment o-[#404040,thickness=2]-  Expression : right >

class Conditional {
}
Statement <|-[#808080]- Conditional
Conditional o-[#404040,thickness=2]-  Expression : expression >
Conditional o-[#404040,thickness=2]- "✱" Statement : ifStatements >
Conditional o-[#404040,thickness=2]- "✱" Statement : elseStatements >

class While {
}
Statement <|-[#808080]- While
While o-[#404040,thickness=2]-  Expression : expression >
While o-[#404040,thickness=2]- "✱" Statement : loopStatements >

class Return {
}
Statement <|-[#808080]- Return
Return o-[#404040,thickness=2]- "0..1" Expression : expression >

class IntType {
}
Type <|-[#808080]- IntType

class FloatType {
}
Type <|-[#808080]- FloatType

class CharType {
}
Type <|-[#808080]- CharType

class ArrayType {
	+int intValue
}
Type <|-[#808080]- ArrayType
ArrayType o-[#404040,thickness=2]-  Type : type >

class StructType {
	+String name
}
Type <|-[#808080]- StructType
StructType -[#ff6600,thickness=3]-  StructDefinition #text:ff6600 : structDefinition >

class Variable {
	+String name
}
Expression <|-[#808080]- Variable
Variable -[#ff6600,thickness=3]-  VarDefinition #text:ff6600 : varDefinition >

class IntLiteral {
	+int intValue
}
Expression <|-[#808080]- IntLiteral

class FloatLiteral {
	+float floatValue
}
Expression <|-[#808080]- FloatLiteral

class CharLiteral {
	+char charValue
}
Expression <|-[#808080]- CharLiteral

class FunctionCallExpression {
	+String name
}
Expression <|-[#808080]- FunctionCallExpression
FunctionCallExpression o-[#404040,thickness=2]- "✱" Expression : expressions >
FunctionCallExpression -[#ff6600,thickness=3]-  FunctionDefinition #text:ff6600 : functionDefinition >

class StructAccess {
	+String name
}
Expression <|-[#808080]- StructAccess
StructAccess o-[#404040,thickness=2]-  Expression : expression >

class ArrayAccess {
}
Expression <|-[#808080]- ArrayAccess
ArrayAccess o-[#404040,thickness=2]-  Expression : left >
ArrayAccess o-[#404040,thickness=2]-  Expression : right >

class Cast {
}
Expression <|-[#808080]- Cast
Cast o-[#404040,thickness=2]-  Type : type >
Cast o-[#404040,thickness=2]-  Expression : expression >

class Arithmetic {
	+String operator
}
Expression <|-[#808080]- Arithmetic
Arithmetic o-[#404040,thickness=2]-  Expression : left >
Arithmetic o-[#404040,thickness=2]-  Expression : right >

class Logic {
	+String operator
}
Expression <|-[#808080]- Logic
Logic o-[#404040,thickness=2]-  Expression : left >
Logic o-[#404040,thickness=2]-  Expression : right >

class LogicAnd {
}
Expression <|-[#808080]- LogicAnd
LogicAnd o-[#404040,thickness=2]-  Expression : left >
LogicAnd o-[#404040,thickness=2]-  Expression : right >

class LogicOr {
}
Expression <|-[#808080]- LogicOr
LogicOr o-[#404040,thickness=2]-  Expression : left >
LogicOr o-[#404040,thickness=2]-  Expression : right >

class LogicNot {
}
Expression <|-[#808080]- LogicNot
LogicNot o-[#404040,thickness=2]-  Expression : expression >

@enduml
